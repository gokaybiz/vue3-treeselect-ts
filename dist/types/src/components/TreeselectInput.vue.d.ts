declare const _sfc_main: import("vue").DefineComponent<{}, {
    keysThatRequireMenuBeingOpen: (string | number)[];
    inputWidth: import("vue").Ref<number>;
    inputValue: import("vue").Ref<string>;
    instance: {
        props: import("./symbol").TreeselectProps;
        hasValue: import("vue").ComputedRef<boolean>;
        internalValue: import("vue").ComputedRef<(string | number)[]>;
        menu: import("./symbol").Menu;
        trigger: import("./symbol").Trigger;
        getNode: (nodeId: string | number | null) => import("./symbol").TreeSelectNode | null;
        clear: () => void;
        focusInput: () => void;
        toggleMenu: () => void;
        openMenu: () => void;
        getMenuDiv: () => HTMLElement | null;
        closeMenu: () => void;
        removeLastValue: () => void;
        select: (node: import("./symbol").TreeSelectNode) => void;
        highlightLastOption: () => void;
        highlightFirstOption: () => void;
        shouldExpand: (node: import("./symbol").TreeSelectNode) => any;
        setCurrentHighlightedOption: (node: import("./symbol").TreeSelectNode, scroll?: boolean | undefined) => void;
        loadChildrenOptions: (parentNode: import("./symbol").TreeSelectNode) => void;
        toggleExpanded: (node: import("./symbol").TreeSelectNode) => void;
        highlightPrevOption: () => void;
        highlightNextOption: () => void;
        localSearch: import("./symbol").LocalSearch;
        getControlDiv: () => HTMLElement;
        getRemoteSearchEntry: () => import("./symbol").RemoteSearchValue;
        handleRemoteSearch: () => void;
        forest: import("./symbol").Forest;
        handleMouseDown: (evt: Event) => void;
        beforeListRenderer: import("vue").Slot | undefined;
        afterListRenderer: import("vue").Slot | undefined;
        customValueLabelRenderer: import("vue").Slot | undefined;
        customLabelRenderer: import("vue").Slot | undefined;
        isSelected: (node?: import("./symbol").TreeSelectNode | null | undefined) => boolean | null | undefined;
        shouldShowOptionInMenu: (node: import("./symbol").TreeSelectNode) => boolean;
        selectedNodes: import("vue").ComputedRef<import("./symbol").TreeSelectNode[]>;
        rootOptionsStates: import("./symbol").RemoteSearchValue;
        loadRootOptions: () => void;
    };
    updateSearchQuery: () => void;
    debouncedCallback: import("lodash").DebouncedFuncLeading<() => void>;
    onFocus: () => void;
    input: import("vue").Ref<HTMLInputElement | undefined>;
    focus: () => void;
    blur: () => void;
    onBlur: () => void;
    onInput: (evt: {
        target: {
            value: string;
        };
    } | Event) => void;
    onKeyDown: (evt: KeyboardEvent) => void;
    getProps: () => {};
    needAutoSize: import("vue").ComputedRef<boolean>;
    onMouseDown: (evt: MouseEvent) => void;
    sizer: import("vue").Ref<HTMLDivElement | undefined>;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
export default _sfc_main;
